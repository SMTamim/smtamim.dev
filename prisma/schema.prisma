// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../generated/zod"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_CONNECTION_STRING")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?       @map("email_verified")
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  blogs         Blog[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Authenticator {
  credentialID         String  @unique
  userId               String  @map("user_id")
  providerAccountId    String  @map("provider_account_id")
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticator")
}

enum BlogStatus {
  PUBLISHED
  PENDING
  UNPUBLISHED
}

model Blog {
  blogId        String     @id @default(cuid()) @map("b_id")
  authorId      String     @map("author_id")
  title         String
  slug          String     @unique
  content       String
  readTime      Int        @map("read_time")
  visitCounter  Int        @default(0) @map("visit_counter")
  featuredImage String     @map("featured_image")
  tags          String[]
  status        BlogStatus @default(PENDING)
  deletedAt     DateTime?
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  // relations
  author User @relation(fields: [authorId], references: [id])

  @@map("blogs")
}

model Project {
  pId              String        @id @default(cuid())
  title            String
  slug             String        @unique
  shortDescription String
  fullDescription  String
  images           String[]
  technologies     String[]
  features         String[]
  challenges       String[]
  status           ProjectStatus @default(PLANNING)
  frontendDemoUrl  String?       @map("frontend_demo_url")
  backendDemoUrl   String?       @map("backend_demo_url")
  frontendGitUrl   String?       @map("frontend_git_url")
  backendGitUrl    String?       @map("backend_git_url")
  isFeatured       Boolean       @default(false)
  deletedAt        DateTime?
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @default(now()) @updatedAt @map("updated_at")

  @@map("projects")
}

enum ProjectStatus {
  PLANNING
  ONGOING
  COMPLETE
}

model SkillCategory {
  sCatId    String    @id @default(cuid()) @map("s_cat_id")
  name      String
  icon      String
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  // relations
  skills    Skill[]

  @@map("skill_category")
}

model Skill {
  sId           String         @id @default(cuid()) @map("s_id")
  sCategoryId   String         @map("s_category_id")
  name          String
  proficiency   Int
  icon          String
  type          SkillType      @default(TECHNICAL_SKILL)
  deletedAt     DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  // relations
  skillCategory SkillCategory? @relation(fields: [sCategoryId], references: [sCatId])

  @@map("skill")
}

enum SkillType {
  TECHNICAL_SKILL
  SOFT_SKILL
}

model WorkExperience {
  wId              String    @id @default(cuid())
  companyName      String    @map("company_name")
  companyWebsite   String    @map("company_website")
  startDate        DateTime
  endDate          DateTime?
  onGoing          Boolean   @default(false)
  responsibilities String[]

  @@map("work_experience")
}
